filter {
  if [@metadata][stage] == 'suricata_json' {

    # move metadata to new field
    mutate {
      # Clean these up later if empty
      add_field => { "[related][hostname]" => []}
      add_field => { "[related][ip]" => []}
      add_field => { "[related][id]" => []}
      add_field => { "[related][hash]" => []}

      # Add ECS specific fields
      add_field => { "[event][module]" => "suricata"}
      ## Timestamp at ingest
      add_field => { "[event][created]" => "[@timestamp]"}
      # Current version of ECS
      add_field => { "[event][version]" => "0.1.0"}

      rename => {
        "event_type" => "[event][dataset]"
        "hostname" => "[device][hostname]"
      }
    }

    # Set the timestamp from the event
    date { match => [ "timestamp", "ISO8601" ] }

    # Suricata uses top-level src/dest to track flow
    if [src_ip] {
      mutate {
        rename => {
          "[src_ip]" => "[network][source][ip]"
          "[src_port]" => "[network][source][port]"
        }

        convert => {
          "[network][source][port]" => "integer"
        }
      }
    }
    if [dest_ip] {
      mutate {
        rename => {
          "[dest_ip]" => "[network][destination][ip]"
          "[dest_port]" => "[network][destination][port]"
        }

        convert => {
          "[network][destination][port]" => "integer"
        }
      }
    }
    mutate {
      rename => {
        "[proto]" => "[network][protocol]"
        "[vlan]" => "[network][vlan]"
      }
    }

    if [app_proto] {
      if [app_proto] == "failed" {
        # delete failed detections to be consistent with bro
      }
      else {
        mutate { rename => {"[app_proto]" => "[network][protocol][application]"}}
      }
    }

    mutate { replace => { "[@metadata][stage]" => "suricata_common" } }
    mutate { merge => {"[flow_id]" => "[related][id]"}}
  }
}

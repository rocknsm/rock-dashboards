filter {
  # Assumes that destination.domain, exists, has been copied/renamed earlier.
  # This is most useful for HTTP host(header), SSL server name (as seen in TLS negotation), and or DNS query/lookup
  if [@metadata][destination_domain] {
    ruby {
      code => '
          # Get the domain from the event
          domain = event.get("[@metadata][destination_domain]")

          # Perform a few hunts/determinations before cleanup
          # url Contains non whitespace
          domain_has_whitespace = domain.match?(/\s/)
          domain_has_non_ascii = !domain.ascii_only?
          # Regex ends with digit is still faster than performing "Integer(domain[-1]) rescue false" or similar
          domain_ends_with_int = /[0-9]$/ === domain
          # Set things that we always want to add even if it is not a domain. Otherwise certain things like boolean wont make sense when applying filter. otherwise you would have to do _exists_ and then true/false
          domain_is_idn = false

          # Perform general cleanup of the domain name
          domain = domain.downcase
          domain = domain.lstrip.rstrip
          domain = domain.chomp(".")

          # If domain has no "." then do not perform enrichment
          domain_has_dot = domain.include?(".")
          if domain_has_dot
              # Dont ask.. reverse + chomp + reverse up to 16 times faster
              domain = domain.reverse.chomp(".").reverse

              # Split domain for processing each level
              domain_split = domain.split(".")

              # Begin to set each level specific info
              # If it has a dot then there is a minimum of two levels so set the info for first and second level. Since only using length once for each level do not set as a variable

              # Get the total levels
              domain_total_levels = domain_split.length
              # Get the total length without "."
              domain_total_length = domain.gsub(".", "").length

              # Level 1
              domain_lev1_name = domain_split[-1]

              # Do not perform enrichment on (.arpa) aka IPv4 PTR or IPv6 PTRs.
              if domain_lev1_name != "arpa"
                  # Level 1
                  domain_nest = { :"level_1" => { :"name" => domain_lev1_name, :"length" => domain_lev1_name.length } }

                  # Also, do not perform on domains ending in an integer because as of 2018-06-01 16:02:00 UTC there are no domains that end in an integer currently as of
                  if !domain_ends_with_int
                      # Level 2
                      domain_lev2_name = domain_split[-2]
                      domain_nest.merge! :"level_2" => { :"name" => domain_lev2_name, :"length" => domain_lev2_name.length }

                      # Level 1+2 Name
                      domain_1n2_name = domain_lev2_name + "." + domain_lev1_name
                      domain_nest.merge! :"1n2_name" => domain_1n2_name


                      # Set IDN (Internationlized Domain Name)
                      if domain.include?("xn--")
                          domain_is_idn = true
                      end

                      if domain_total_levels >= 3
                          # Level 3
                          domain_lev3_name = domain_split[-3]
                          domain_1n2n3_name =  domain_lev3_name + "." + domain_1n2_name
                          domain_nest.merge! :"level_3" => { :"name" => domain_lev3_name, :"length" => domain_lev3_name.length }
                          domain_nest.merge! :"1n2n3_name" => domain_1n2n3_name

                          if domain_total_levels - 3 >= 2
                              # Level 4
                              domain_lev4_name = domain_split[-4]
                              domain_nest.merge! :"level_4" => { :"name" => domain_lev4_name, :"length" => domain_lev4_name.length }
                              # Level 5
                              domain_lev5_name = domain_split[-5]
                              domain_nest.merge! :"level_5" => { :"name" => domain_lev5_name, :"length" => domain_lev5_name.length }
                          elsif domain_total_levels - 3 == 1
                              # Level 4
                              domain_lev4_name = domain_split[-4]
                              domain_nest.merge! :"level_4" => { :"name" => domain_lev4_name, :"length" => domain_lev4_name.length }
                          end
                      end

                      event.set("[domain]", domain_nest)

                      ## Here down is old code if wanting to do consonants and many other enrichment that may not be necessary but desired. also performing on more than just up to the 5th level
                      # Count the consonants
                      #domain_total_consonants = domain.count "bcdfghjklmnpqrstvxzw"
                      # Count the vowels
                      #domain_total_vowels = domain.count "aeiouy"
                      # Count the digits
                      #domain_total_digits = domain.count "0123456789"
                      # Count the hex
                      #domain_total_hex = domain.count "0123456789abcdef"
                      # Count punctuation
                      #domain_total_punctuation = domain.count "-_"
                      # Get total alphanumeric
                      #domain_total_letters = domain_total_consonants + domain_total_vowels

                      # Create/Setup hash/dictionary variable for breaking down information for each level
                      #domain_level_info = Hash.new

                      # Combine first and second level domain for improved whitelisting as well as possible domain whois enrichment
                      #if domain_total_levels >= 2
                      #        domain_1n2 = domain_split[-2..-1].join(".")
                      #        event.set("domain_name_1n2", domain_1n2)
                      #end
                      # Combine first and second and third level domain for improved whitelisting
                      #if domain_total_levels >= 3
                      #        domain_1n2n3 = domain_split[-3..-1].join(".")
                      #        event.set("domain_name_1n2n3", domain_1n2n3)
                      #end

                      # Begin to set each level specific info
                      #number = 0
                      #for level in domain_split.reverse
                          #number += 1
                          #lev = number.to_s
                          #lev = "lev_" + lev
                          #domain_level_info[lev] = {}
                          #domain_level_info[lev].store("name", level)
                          #domain_level_info[lev].store("length", level.length)

                          ##level_consonants = level.count "bcdfghjklmnpqrstvxzw"
                          ##level_vowels = level.count "aeiouy"
                          ##level_digits = level.count "0123456789"
                          ##level_hex = level.count "0123456789abcdef"
                          ##level_punctuation = level.count "-_"
                          ##level_letters = level_consonants + level_vowels
                          ##domain_level_info[lev].store("consonants", level_consonants)
                          ##domain_level_info[lev].store("vowels", level_vowels)
                          ##domain_level_info[lev].store("digits", level_digits)
                          ##domain_level_info[lev].store("hex", level_hex)
                          ##domain_level_info[lev].store("punctuation", level_punctuation)
                          ##domain_level_info[lev].store("letters", level_letters)

                          #TONOTE:Stopping at 5 to make pipeline faster
                          #if number == 5
                              #break
                          #end
                      #end

                      #event.set("[domain]", domain_level_info)
                      #event.set("[domain][total][levels]", domain_total_levels)
                      #event.set("[domain][total][length]", domain_total_length)
                      #event.set("[domain][total][consonants]", domain_total_consonants)
                      #event.set("[domain][total][vowels]", domain_total_vowels)
                      #event.set("[domain][total][digits]", domain_total_digits)
                      #event.set("[domain][total][hex]", domain_total_hex)
                      #event.set("[domain][total][punctuation]", domain_total_punctuation)
                      #event.set("[domain][total][letters]", domain_total_letters)
                  else
                      event.set("[domain][level_1][name]", domain_lev1_name)
                  end

              else
                  event.set("[domain][level_1][name]", domain_lev1_name)
              end
          end

          # Things to set regardless of other enrichment
          event.set("[domain][name]", domain)
          event.set("[domain][total][levels]", domain_total_levels)
          event.set("[domain][total][length]", domain_total_length)
          event.set("[domain][ends_with_int]", domain_ends_with_int)
          event.set("[domain][has_dot]", domain_has_dot)
          event.set("[domain][has_non_ascii]", domain_has_non_ascii)
          event.set("[domain][has_whitespace]", domain_has_whitespace)
          event.set("[domain][is_idn]", domain_is_idn)
        '
        tag_on_exception =>  "_rubyexception-all-destination_domain_enrichment"
    }
  }
}
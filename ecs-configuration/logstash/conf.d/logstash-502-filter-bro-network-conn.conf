## CONN ##################################################################
filter {
  if [event][dataset] == "conn" {
    if [conn] {

      mutate {
        rename => {
          "[conn][resp_l2_addr]" => "[server][mac]"
          "[conn][resp_bytes]" => "[server][bytes]"
          "[conn][resp_ip_bytes]" => "[server][ip_bytes]"
          "[conn][resp_pkts]" => "[server][packets]"
          "[conn][orig_l2_addr]" => "[client][mac]"
          "[conn][orig_bytes]" => "[client][bytes]"
          "[conn][orig_ip_bytes]" => "[client][bytes]"
          "[conn][orig_pkts]" => "[client][packets]"
          "[conn][duration]" => "[event][duration]"
          "[conn][service]" => "[network][protocol]"
          "[conn][conn_state]" => "[network][connection][state]"
          "[conn][history]" => "[network][connection][history]"
          "[conn][missed_bytes]" => "[network][missed_bytes]"
        }

        merge => { "[related][id]" => "[log][id][tunnel_parents]"}

      }

      # Calculated fields
      if [conn][local_orig] {
        mutate { convert => { "[conn][local_orig]" => "boolean" } }
      }

      else {
        mutate { add_field => { "[network][direction]" => "unknown" } }
      }

      if [conn][local_resp] {
        mutate { convert => { "[conn][local_resp]" => "boolean" } }
      }

      else {
        mutate { add_field => { "[network][direction]" => "unknown" } }
      }

      if [conn][local_orig] {

        if [conn][local_resp] {
          mutate { add_field => { "[network][direction]" => "internal" } }
        }

        else {
          mutate { add_field => { "[network][direction]" => "outbound" } }
        }

      }

      else if [conn][local_resp] {
        mutate { add_field => { "[network][direction]" => "inbound" } }
      }

      else {
        mutate { add_field => { "[network][direction]" => "external" } }
      }

      # Connection History & Connection State enrichment
      if [network][connection][history] {
        ruby {
          code => "
            hist = event.get('[network][connection][history]')
            hist_dict = {
              's' => 'SYN with out ACK set',
              'h' => 'SYN-ACK handshake',
              'a' => 'pure ACK',
              'd' => 'packet with payload data',
              'f' => 'packet with FIN bit set',
              'r' => 'packet with RST bit set',
              'c' => 'packet with bad checksum',
              't' => 'packet with retransmitted payload',
              'w' => 'packet with a zero window advertisement',
              'i' => 'inconsistent packet',
              'q' => 'multi-flag packet',
              't' => 'retransmitted packet',
              '^' => 'flipped connection',
              'g' => 'a content gap'
            }
            hist = hist.split('')
            hist = hist.uniq
            hist_client = ''
            hist_client_full = ''
            hist_server = ''
            hist_server_full = ''
            hist_full = ''
            for hist_value in hist
              if hist_value == hist_value.upcase
                dict_hist_full = hist_dict[hist_value.downcase]
                hist_client_full = hist_client_full + dict_hist_full + '. '
                hist_client = hist_client + hist_value
                hist_full = hist_full + dict_hist_full + '. '
              else
                dict_hist_full = hist_dict[hist_value]
                hist_server_full = hist_server_full + dict_hist_full + '. '
                hist_server = hist_server + hist_value
                hist_full = hist_full + dict_hist_full + '. '
              end
            end
            if !hist_client.empty?
              event.set('[client][connection][history]', hist_client)
              event.set('[client][connection][history_detailed]', hist_client_full)
            end
            if !hist_server.empty?
              event.set('[server][connection][history]', hist_server)
              event.set('[server][connection][history_detailed]', hist_server_full)
            end
            event.set('[network][connection][history_detailed]', hist_full)
          "
          tag_on_exception => "_rubyexception-zeek-network_connection_history"
        }
      }

      translate {
        field => "[network][connection][state]"
        destination => "[network][connection][state_detailed]"
        dictionary => [
          "S0", "Connection attempt seen, no reply",
          "S1", "Connection established, not terminated",
          "S2", "Connection established and close attempt by source seen (but no reply from destination)",
          "S3", "Connection established and close attempt by destination seen (but no reply from source)",
          "SF", "Normal SYN/FIN completion",
          "REJ", "Connection attempt rejected",
          "RSTO", "Connection established, source aborted (sent a RST)",
          "RSTR", "Established, destination aborted",
          "RSTOS0", "Source sent a SYN followed by a RST, never saw a SYN-ACK from the destination",
          "RSTRH", "Destination sent a SYN ACK followed by a RST, never saw a SYN from the (purported) source",
          "SH", "Source sent a SYN followed by a FIN, never saw a SYN ACK from the destination (ie: connection was half open)",
          "SHR", "Destination sent a SYN ACK followed by a FIN, never saw a SYN from the source",
          "OTH", "No SYN seen, just midstream traffic (a partial connection that was not later closed)"
        ]
      }

      # Add IP bytes so we can get totals
      if [client][ip_bytes] {
        ruby {
          code => "
            src = event.get('[client][ip_bytes]')
            dst = event.get('[server][ip_bytes]')
            total = src + dst
            event.set('[network][ip_bytes]', total)
          "
          tag_on_exception => "_rubyexception-zeek-network_ip_bytes"
        }
      }
      # Add bytes so we can get totals
      if [client][bytes] {
        ruby {
          code => "
            src = event.get('[client][bytes]')
            dst = event.get('[server][bytes]')
            # Destination/Server bytes may not always exist, ie: broadcast
            if !dst.nil?
              total = src + dst
            else
              total = src
            end
            event.set('[network][bytes]', total)
          "
          tag_on_exception => "_rubyexception-zeek-network_bytes"
        }
      }
      # Add packets so we can get totals
      if [client][packets] {
        ruby {
          code => "
            src = event.get('[client][packets]')
            dst = event.get('[server][packets]')
            total = src + dst
            event.set('[network][packets]', total)
          "
          tag_on_exception => "_rubyexception-zeek-network_packets"
        }
      }

      # As of 2.6 this field is no longer empty, see 2.6 notes:
      # """
      # The "tunnel_parents" field of conn.log is now marked &optional, so, in the default configuration of logs,
      # this field will show "-"  instead of "(empty)" for connections that lack any tunneling.
      # """
      # This shouldn't be set if its null/no-value but it happens from Bro, so remove it if so
      #if [conn][tunnel_parents] {
      #  ruby {
      #    code => "
      #      bro_id_tunnel_parents = event.get('[conn][tunnel_parents]')
      #      # Determine if the IP field is an array
      #      if !bro_id_tunnel_parents.empty?
      #          event.set('[log][id][tunnel_parents]', bro_id_tunnel_parents)
      #      end
      #    "
      #    remove_field => [ "[conn][tunnel_parents]" ]
      #    tag_on_exception =>  "_rubyexception_tunnel_parents"
      #  }
      #}

    }
  }
}
filter {
  if [@metadata][stage] == "ecs_needs_enriched" {
    mutate {
      add_field => { "[event][type]" => "%{[event][module]}-%{[event][category]}-%{[event][dataset]}"}
      replace   => { "[@metadata][stage]" => "ecs_enriched" }
    }

    # Add GeoIP Info
    if [network][client][ip] {
      geoip {
        source => "[network][client][ip]"
        target => "[network][client][geo]"
        default_database_type => "City"
      }
      geoip {
        source => "[network][client][ip]"
        target => "[network][client][geo]"
        default_database_type => "ASN"
      }

      # Update related IPs
      mutate {
        merge => { "[related][ip]" => "[network][client][ip]" }
        # Add the location to related
      }

      if [network][client][geo] {
        mutate {
          merge => {
            "[related][geo]" => ["%{[network][client][geo][location][lat]},%{[network][client][geo][location][lon]}"]
          }
        }
      }
    }

    if [network][server][ip] {
      geoip {
        source => "[network][server][ip]"
        target => "[network][server][geo]"
        default_database_type => "City"
      }

      geoip {
        source => "[network][server][ip]"
        target => "[network][server][geo]"
        default_database_type => "ASN"
      }

      # Update related IPs
      mutate {
        merge => { "[related][ip]" => "[network][server][ip]" }
      }

      if [network][server][geo] {
        mutate {
          # Add the location to related
          merge => {
            "[related][geo]" => "%{[network][server][geo][location][lat]},%{[network][server][geo][location][lon]}"
          }
        }
      }
    }

    if [network][source][ip] {
      geoip {
        source => "[network][source][ip]"
        target => "[network][source][geo]"
        default_database_type => "City"
      }

      geoip {
        source => "[network][source][ip]"
        target => "[network][source][geo]"
        default_database_type => "ASN"
      }

      # Update related IPs
      mutate {
        merge => { "[related][ip]" => "[network][source][ip]" }
      }
      if [network][source][geo] {
        mutate {
          # Add the location to related
          merge => {
            "[related][geo]" => "%{[network][source][geo][location][lat]},%{[network][source][geo][location][lon]}"
          }
        }
      }
    }

    if [network][destination][ip] {
      geoip {
        source => "[network][destination][ip]"
        target => "[network][destination][geo]"
        default_database_type => "City"
      }

      geoip {
        source => "[network][destination][ip]"
        target => "[network][destination][geo]"
        default_database_type => "ASN"
      }

      # Update related IPs
      mutate {
        merge => { "[related][ip]" => "[network][destination][ip]" }
      }

      if [network][destination][geo] {
        mutate {
          # Add the location to related
          merge => {
            "[related][geo]" => "%{[network][destination][geo][location][lat]},%{[network][destination][geo][location][lon]}"
          }
        }
      }
    }

    # Lookup community id for unidirectional network events
    if [network][client][ip] and [network][server][ip] and [network][protocol] {
      ruby {
        path => "/etc/logstash/ruby/logstash-ruby-filter-community-id.rb"
        script_params => {
          "source_ip_field" => "[network][client][ip]"
          "dest_ip_field" => "[network][server][ip]"
          "source_port_field" => "[network][client][port]"
          "dest_port_field" => "[network][server][ip]"
          "protocol_field" => "[network][protocol]"
          "target_field" => "[network][community_id]"
        }
      }
    }
    # Lookup community id for bidirectional network events
    if [network][source][ip] and [network][destination][ip] and [network][protocol] {
      ruby {
        path => "/etc/logstash/ruby/logstash-ruby-filter-community-id.rb"
        script_params => {
          "source_ip_field" => "[network][source][ip]"
          "dest_ip_field" => "[network][destination][ip]"
          "source_port_field" => "[network][source][port]"
          "dest_port_field" => "[network][destination][ip]"
          "protocol_field" => "[network][protocol]"
          "target_field" => "[network][community_id]"
        }
      }
    }

    # remove fields with empty values
    # ruby {
    #   code => "
    #     def walk_hash(parent, path, hash)
    #       path << parent if parent
    #       hash.each do |key, value|
    #         walk_hash(key, path, value) if value.is_a?(Hash)
    #         @paths << (path + [key]).map {|p| '[' + p + ']' }.join('')
    #       end
    #       path.pop
    #     end
    #
    #     @paths = []
    #     walk_hash(nil, [], event.to_hash)
    #
    #     @paths.each do |path|
    #       value = event.get(path)
    #       event.remove(path) if value.nil? || (value.respond_to?(:empty?) && value.empty?)
    #     end
    #   "
    # }
  }
}

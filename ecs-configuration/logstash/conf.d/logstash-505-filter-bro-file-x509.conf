## x509 ###################################################################
filter {
  if [event][dataset] == "x509" {
    mutate {

      rename => {
        "[x509][basic_constraints_ca]" => "[x509][certificate][basic_constraints_ca]"
        "[x509][basic_constraints_path_len]" => "[x509][certificate][basic_constraints_path_length]"
        "[x509][certificate_cn]" => "[x509][certificate][common_name]"
        "[x509][certificate_curve]" => "[x509][certificate][elliptic_curve]"
        "[x509][certificate_exponent]" => "[x509][certificate][exponent]"
        "[x509][certificate_issuer]" => "[x509][certificate][issuer]"
        "[x509][certificate_key_alg]" => "[x509][certificate][key_algorithm]"
        "[x509][certificate_key_length]" => "[x509][certificate][key_length]"
        "[x509][certificate_key_type]" => "[x509][certificate][key_type]"
        "[x509][certificate_not_valid_before]" => "[x509][certificate][not_valid_before]"
        "[x509][certificate_not_valid_after]" => "[x509][certificate][not_valid_after]"
        "[x509][certificate_serial]" => "[x509][certificate][serial]"
        "[x509][certificate_sig_alg]" => "[x509][certificate][signature_algorithm]"
        "[x509][certificate_subject]" => "[x509][certificate][subject]"
        "[x509][certificate_version]" => "[x509][certificate][version]"
        "[x509][san_dns]" => "[x509][san][dns]"
        "[x509][san_email]" => "[x509][san][email]"
        "[x509][san_uri]" => "[x509][san][url]"
        "[x509][san_ip]" => "[x509][san][ip]"
      }

      copy => {
        "[log][id][id]" => "[event][id]"
        "[x509][san][url]" => "[url][original]"
      }

      merge => { "[related][id]" => "[log][id][id]" }

    }

    #Parse domain names & IPs x509 SANs
    ruby {
      init => "
        require 'logstash/event'
        require 'set'

        IPV4_REGEX = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
        IPV6_REGEX = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/
        DNS_REGEX = /^(\*\.)?(([\da-zA-Z])([_\w-]{,62})\.){,127}(([\da-zA-Z])[_\w-]{,61})?([\da-zA-Z]\.((xn\-\-[a-zA-Z\d]+)|([a-zA-Z\d]{2,})))\.?$/
      "
      code => "
        san_dns = Set.new( event.get('[x509][san][dns]'))
        #san_ip = Set.new( event.get('[x509][san][ip]'))
        related_ip = Set.new( event.get('[related][ip]'))
        related_hostname = Set.new( event.get('[related][domain]'))

        #san_ip.each do |entry|
        #  if (entry =~ IPV4_REGEX) || (entry =~ IPV6_REGEX)
        #    related_ip.add(entry)
        #  end
        #end
        san_dns.each do |entry|
          if (entry =~ IPV4_REGEX) || (entry =~ IPV6_REGEX)
            related_ip.add(entry)
          elsif (entry =~ DNS_REGEX)
            # Trim off the wildcard
            if entry[0..1] == '*.'
              related_hostname.add(entry[2..-1])
            else
              related_hostname.add(entry)
            end
          end
        end

        if related_ip.size() > 0
          event.set( '[related][ip]', related_ip.to_a )
        end
        if related_hostname.size() > 0
          event.set( '[related][domain]', related_hostname.to_a )
        end
      "
      tag_on_exception => "_rubyexception-zeek-parse_domains_and_ips_from_x509"
    }

  }
}
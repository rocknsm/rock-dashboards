filter {
  if [@metadata][stage] == 'bro_json' {

    # move metadata to new field
    mutate {
      # Clean these up later if empty
      add_field => { "[related][hostname]" => []}
      add_field => { "[related][ip]" => []}
      add_field => { "[related][id]" => []}
      add_field => { "[related][geo]" => []}
      add_field => { "[related][hash]" => []}

      # Add ECS specific fields
      add_field => { "[event][module]" => "bro"}
      ## Timestamp at ingest
      add_field => { "[event][created]" => "%{[@timestamp]}"}
      # Current version of ECS
      add_field => { "[event][version]" => "0.1.0"}

      rename => {
        "@stream" => "[event][dataset]"
        "@system" => "[device][hostname]"
        "@proc"   => "[device][bro][process]"
      }
    }

    # Set the timestamp from the event
    date { match => [ "ts", "ISO8601" ] }
    mutate { remove_field => ["ts"]}

    # Rename files to file
    if [event][dataset] == "files" {
      mutate { replace => {"[event][dataset]" => "file" }}
    }

    # Nest the entire document
    ruby {
      code => "
        require 'logstash/event'

        logtype = event.get('[event][dataset]')

        ev_hash = event.to_hash
        event_hash = ev_hash['event']
        device_hash = ev_hash['device']
        timestamp = ev_hash['@timestamp']

        # Cleanup duplicate info
        ev_hash.delete('event')
        ev_hash.delete('device')
        ev_hash.delete('@timestamp')
        ev_hash.delete('@version')
        ev_hash.delete('tags')

        result = {
        logtype => ev_hash,
        'event' => event_hash,
        'device' => device_hash,
        '@timestamp' => timestamp
        }
        event.initialize( result )
      "
    }

    if "[%{[event][dataset]}][id_orig_h]" {
      # Common connection-oriented log information
      mutate {
        rename => {
          "[%{[event][dataset]}][id_orig_h]" => "[network][client][ip]"
          "[%{[event][dataset]}][id_orig_p]" => "[network][client][port]"
          "[%{[event][dataset]}][id_resp_h]" => "[network][server][ip]"
          "[%{[event][dataset]}][id_resp_p]" => "[network][server][port]"
        }

        # Format data
        convert => {
          "[network][client][port]" => "integer"
          "[network][server][port]" => "integer"
        }
      }
    }

    mutate { replace => { "[@metadata][stage]" => "bro_category" } }
  }
}

filter {
  if [@metadata][stage] == 'bro_category' {

    if [event][category] in ["conn", "dce_rpc", "dhcp", "dnp3", "dns", "ftp", "http", "irc", "kerberos", "modbus", "modbus_register_change", "mysql", "ntml", "radius", "rdp", "rfb", "sip", "smb_cmd", "smb_files", "smb_mapping", "smtp", "snmp", "socks", "ssh", "ssl", "syslog", "tunnel"] {

      if [@metadata][ENABLE_BRO_NETWORK] == "false" {
        # Configuration has disabled bro files events
        drop { }
      }

      mutate {
          rename => { "[%{[event][category]}][uid]" => "[event][id]" }
          merge => { "[related][id]" => "[event][id]" }
      }

      ## CONN ##################################################################
      if [conn] {
        mutate {
          merge => { "[related][id]" => "[conn][tunnel_parents]"}
          rename => { "[conn][proto]" => "[network][protocol]"}
        }
      }

      ## DNS ###################################################################
      # if [dns][qtype] == 1 (A) or 28 (AAAA), split out answers to hostnames & ips
      # Nest the entire document
      if [dns] {

        ruby {
          init => "
            require 'logstash/event'
            require 'set'

            IPV4_REGEX = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
            IPV6_REGEX = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/

            IPV4_PTR = /^(?:[0-9]{1,3}\.){3}[0-9]{1,3}\.in-addr\.arpa$/i
            IPV6_PTR = /^(?:[0-9a-f]\.){31}[0-9a-f]\.ip6\.arpa$/i
          "
          code => "
            query = event.get('[dns][query]')
            qtype = event.get('[dns][qtype]').to_i
            answers = event.get('[dns][answers]') || []

            related_ip = Set.new( event.get('[related][ip]'))
            related_hostname = Set.new( event.get('[related][hostname]'))

            if (qtype == 1 || qtype == 28) # A or AAAA
              related_hostname.add(query.downcase)
              answers.each do |answer|
                if (answer =~ IPV4_REGEX) || (answer =~ IPV6_REGEX)
                  related_ip.add(answer)
                else
                  related_hostname.add(answer)
                end
              end
            elsif qtype == 12 # PTR query
              related_hostname.add(query.downcase)
              if IPV4_PTR.match(query)
                _addr = [query[0,query.length-13].split('.').reverse].join('.')
                related_ip.add(_addr)
              elsif IPV6_PTR.match(query)
                _addr = query[0,query.length-9].reverse.split('.').join().scan(/.{4}/).join(':')
                _addr.gsub!(/\b0{1,3}([\da-f]+)\b/i, '\1')
                # Abbreviate addr
                loop do
                  break if _addr.sub!(/\A0:0:0:0:0:0:0:0\z/, '::')
                  break if _addr.sub!(/\b0:0:0:0:0:0:0\b/, ':')
                  break if _addr.sub!(/\b0:0:0:0:0:0\b/, ':')
                  break if _addr.sub!(/\b0:0:0:0:0\b/, ':')
                  break if _addr.sub!(/\b0:0:0:0\b/, ':')
                  break if _addr.sub!(/\b0:0:0\b/, ':')
                  break if _addr.sub!(/\b0:0\b/, ':')
                  break
                end
                _addr.sub!(/:{3,}/, '::')

                related_ip.add(_addr)
              end
            end

            if related_ip.size() > 0
              event.set( '[related][ip]', related_ip.to_a )
            end
            if related_hostname.size() > 0
              event.set( '[related][hostname]', related_hostname.to_a )
            end
          "
        }

        # Rename fields to ECS names
        mutate {
          rename => {
            "[dns][AA]" => "[dns][authoritative_answer]"
            "[dns][TC]" => "[dns][truncated]"
            "[dns][RD]" => "[dns][recursion_desired]"
            "[dns][RA]" => "[dns][recursion_available]"
            "[dns][qclass_name]" => "[dns][query_class]"
            "[dns][qtype_name]" => "[dns][query_type]"
            "[dns][rcode_name]" => "[dns][response_code]"
            "[dns][trans_id]" => "[dns][transaction_id]"
          }
        }
      }
      ## FTP ###################################################################
      if [ftp] {
        mutate {
          merge => { "[related][id]" => "[ftp][fuid]"}
        }
      }

      ## HTTP ##################################################################
      if [http] {
        # Parse domain names & IPs from host header
        ruby {
          init => "
            require 'logstash/event'
            require 'set'

            IPV4_REGEX = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/
            IPV6_REGEX = /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/
          "
          code => "
            host = event.get('[http][host]')

            related_ip = Set.new( event.get('[related][ip]'))
            related_hostname = Set.new( event.get('[related][hostname]'))

            if (host =~ IPV4_REGEX) || (host =~ IPV6_REGEX)
              related_ip.add(host)
            else
              related_hostname.add(host)
            end

            if related_ip.size() > 0
              event.set( '[related][ip]', related_ip.to_a )
            end
            if related_hostname.size() > 0
              event.set( '[related][hostname]', related_hostname.to_a )
            end
          "
        }

        mutate { merge => { "[related][id]" => "[http][orig_fuids]" }}
        mutate { merge => { "[related][id]" => "[http][resp_fuids]" }}
        mutate { rename => { "[http][info_code]" => "[http][info][code]" }}
        mutate { rename => { "[http][info_msg]" => "[http][info][message]" }}
        mutate { rename => { "[http][orig_fuids]" => "[http][client][file_id]"}}
        mutate { rename => { "[http][orig_mime_types]" => "[http][client][mime_types]"}}
        mutate { rename => { "[http][request_body_len]" => "[http][request][body_length]"}}
        mutate { rename => { "[http][resp_fuids]" => "[http][server][file_id]"}}
        mutate { rename => { "[http][resp_mime_types]" => "[http][server][mime_types]"}}
        mutate { rename => { "[http][resp_filenames]" => "[http][server][filenames]"}}
        mutate { rename => { "[http][response_body_len]" => "[http][response][body_length]"}}
        mutate { rename => { "[http][status_code]" => "[http][status][code]"}}
        mutate { rename => { "[http][status_message]" => "[http][status][message]"}}
        mutate { rename => { "[http][trans_depth]" => "[http][transaction_depth]"}}
        mutate { copy => { "[http][server][filenames]" => "[file][name]"}}

        useragent {
          source => "[http][user_agent]"
          target => "user_agent"
        }

        mutate { rename => { "[http][user_agent]" => "[user_agent][original]"}}

      }

      ## IRC ###################################################################
      if [irc] {
        mutate {
          merge => { "[related][id]" => "[irc][fuid]"}
        }
      }

      ## SIP ###################################################################
      if [sip] {
        useragent {
          source => "[sip][user_agent]"
          target => "user_agent"
        }

        mutate { rename => { "[sip][user_agent]" => "[user_agent][original]"}}
      }
      ## SMB_Files #############################################################
      if [smb_files] {
        mutate {
          merge => { "[related]id]" => "[smb_files][fuid]" }
        }
      }

      ## SMTP ##################################################################
      if [smtp] {
        mutate {
          merge => { "[related][id]" => "[smtp][fuids]" }
          merge => { "[related][ip]" => "[smtp][path]"}
        }
        mutate {
          merge => { "[related][ip]" => "[smtp][x_originating_ip]"}
        }

        useragent {
          source => "[smtp][user_agent]"
          target => "user_agent"
        }

        mutate { rename => { "[smtp][user_agent]" => "[user_agent][original]"}}
      }


      mutate {
        add_field => { "[event][module]"   => "network"}
        replace =>   { "[@metadata][stage]" => "bro_network"}
      } # mutate
    }
  }
}
